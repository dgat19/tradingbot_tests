import openbb
import yfinance as yf
import talib
import pandas as pd
import numpy as np
from alpaca_trade_api.rest import REST, TimeFrame
from sklearn.ensemble import RandomForestClassifier
import csv
import datetime
import json

# Alpaca API credentials
API_KEY = 'PA3NRFGUO5AU'
API_SECRET = 'PKLLPAIZVPAFBTCF72Xey'
BASE_URL = 'https://paper-api.alpaca.markets/v2'
#'https://paper-api.alpaca.markets'

# Initialize Alpaca API
alpaca = REST(API_KEY, API_SECRET, BASE_URL)

# Global variables for tracking trades and training data
trade_log = []
trade_data = []
model = RandomForestClassifier()

# Function to analyze stock with OpenBB Terminal
def analyze_stock_with_openbb(ticker):
    stock_data = openbb.stocks.load(ticker, interval="1d", start="6mo")

    stock_data['MACD'], stock_data['Signal'] = openbb.stocks.ta.macd(stock_data)
    stock_data['RSI'] = openbb.stocks.ta.rsi(stock_data)

    last_macd = stock_data['MACD'].iloc[-1]
    last_signal = stock_data['Signal'].iloc[-1]
    macd_crossover = last_macd > last_signal

    last_rsi = stock_data['RSI'].iloc[-1]
    rsi_overbought = last_rsi > 70
    rsi_oversold = last_rsi < 30

    openbb.stocks.ta.plot(stock_data, 'RSI')
    openbb.stocks.ta.plot(stock_data, 'MACD')

    return macd_crossover, rsi_overbought, rsi_oversold

# Function to backtest trading strategy using OpenBB
def backtest_strategy(ticker, start_date="2020-01-01", end_date="2023-01-01"):
    # OpenBB backtest module
    backtest_result = openbb.stocks.ta.backtest(ticker, start=start_date, end=end_date, indicators=['macd', 'rsi'])
    print(backtest_result)
    return backtest_result

# Machine learning model optimization
def optimize_model():
    # Hyperparameter grid search for RandomForestClassifier
    param_grid = {
        'n_estimators': [50, 100, 200],
        'max_depth': [5, 10, 20],
        'min_samples_split': [2, 5, 10]
    }
    
    grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=5)
    grid_search.fit(X_train, y_train)
    
    print(f"Best parameters: {grid_search.best_params_}")
    return grid_search.best_estimator_

# Cross-validation function
def cross_validate_model():
    scores = cross_val_score(model, X_train, y_train, cv=5)
    print(f"Cross-validation scores: {scores}")
    print(f"Mean cross-validation score: {np.mean(scores)}")

# Evaluate and retrain model based on trades
def retrain_model():
    if len(trade_data) < 10:
        return  # Need more data for retraining

    df = pd.DataFrame(trade_data)
    X = df[['entry_price', 'exit_price', 'volume', 'macd', 'rsi']]  # Example features
    y = df['result'].apply(lambda x: 1 if x == 'win' else 0)  # 1 = win, 0 = loss

    global X_train, y_train
    X_train, y_train = X, y

    # Perform cross-validation and hyperparameter tuning
    cross_validate_model()
    optimized_model = optimize_model()

    # Update the model with the best estimator
    model = optimized_model

# Main function
def main():
    stocks = ['AAPL', 'TSLA', 'GOOGL']  # Example tickers
    for stock in stocks:
        try:
            # Backtest the strategy
            backtest_strategy(stock)

            # Analyze stock using OpenBB
            macd_crossover, rsi_overbought, rsi_oversold = analyze_stock_with_openbb(stock)

            # Train ML model on historical data (trade data required)
            retrain_model()

            # Example: Execute a trade based on the analysis
            buy_call = macd_crossover and rsi_oversold
            trade_stock(stock, buy_call)
            
        except Exception as e:
            print(f"Error analyzing {stock}: {e}")

if __name__ == "__main__":
    main()