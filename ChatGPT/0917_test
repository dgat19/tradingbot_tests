import openbb
import yfinance as yf
import talib
import pandas as pd
import numpy as np
from alpaca_trade_api.rest import REST
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV, cross_val_score
import newspaper
import re
import csv
import datetime
import json

# Alpaca API credentials
API_KEY = 'PA3NRFGUO5AU'
API_SECRET = 'PKLLPAIZVPAFBTCF72Xey'
BASE_URL = 'https://paper-api.alpaca.markets/v2'
#'https://paper-api.alpaca.markets'

# Initialize Alpaca API
alpaca = REST(API_KEY, API_SECRET, BASE_URL)

# Global variables for tracking trades and training data
trade_log = []
trade_data = []
model = RandomForestClassifier()

# Function to scrape news for stock symbols
def scrape_news_articles(url):
    news_paper = newspaper.build(url, language='en')
    articles = news_paper.articles
    stock_tickers = set()

    # Fetch stock ticker list from yfinance or other reliable source
    all_stock_tickers = yf.Tickers('AAPL TSLA GOOGL AMZN FB').tickers.keys()  # Example tickers; you can fetch a larger list

    # Scrape articles
    for article in articles[:10]:  # Limit to first 10 articles for efficiency
        try:
            article.download()
            article.parse()
            text = article.text

            # Use regex to find stock tickers within the article
            for ticker in all_stock_tickers:
                if re.search(rf'\b{ticker}\b', text):
                    stock_tickers.add(ticker)

        except Exception as e:
            print(f"Error processing article: {e}")

    return stock_tickers

# Fetch stock data and apply technical indicators using OpenBB Terminal
def analyze_stock_with_openbb(ticker):
    stock_data = openbb.stocks.load(ticker, interval="1d", start="6mo")

    stock_data['MACD'], stock_data['Signal'] = openbb.stocks.ta.macd(stock_data)
    stock_data['RSI'] = openbb.stocks.ta.rsi(stock_data)

    last_macd = stock_data['MACD'].iloc[-1]
    last_signal = stock_data['Signal'].iloc[-1]
    macd_crossover = last_macd > last_signal

    last_rsi = stock_data['RSI'].iloc[-1]
    rsi_overbought = last_rsi > 70
    rsi_oversold = last_rsi < 30

    openbb.stocks.ta.plot(stock_data, 'RSI')
    openbb.stocks.ta.plot(stock_data, 'MACD')

    return macd_crossover, rsi_overbought, rsi_oversold

# Machine learning model optimization
def optimize_model():
    param_grid = {
        'n_estimators': [50, 100, 200],
        'max_depth': [5, 10, 20],
        'min_samples_split': [2, 5, 10]
    }

    grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=5)
    grid_search.fit(X_train, y_train)
    print(f"Best parameters: {grid_search.best_params_}")
    return grid_search.best_estimator_

# Cross-validation function
def cross_validate_model():
    scores = cross_val_score(model, X_train, y_train, cv=5)
    print(f"Cross-validation scores: {scores}")
    print(f"Mean cross-validation score: {np.mean(scores)}")

# Evaluate and retrain model based on trades
def retrain_model():
    if len(trade_data) < 10:
        return

    df = pd.DataFrame(trade_data)
    X = df[['entry_price', 'exit_price', 'volume', 'macd', 'rsi']]
    y = df['result'].apply(lambda x: 1 if x == 'win' else 0)

    global X_train, y_train
    X_train, y_train = X, y

    cross_validate_model()
    optimized_model = optimize_model()

    model = optimized_model

# Execute trades and log results
def trade_stock(ticker, buy_call=True):
    action = 'call' if buy_call else 'put'
    try:
        alpaca.submit_order(
            symbol=ticker,
            qty=1,
            side='buy',
            type='market',
            time_in_force='gtc',
            order_class='option',
            option_side=action
        )
        log_trade(ticker, action)
    except Exception as e:
        print(f"Error executing trade for {ticker}: {e}")

# Logging the trades made
def log_trade(ticker, action):
    trade_time = datetime.datetime.now()
    log_entry = {
        'ticker': ticker,
        'action': action,
        'time': trade_time.strftime("%Y-%m-%d %H:%M:%S")
    }
    trade_log.append(log_entry)

    with open('trade_log.csv', 'a', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=['ticker', 'action', 'time'])
        writer.writerow(log_entry)

# Main function
def main():
    # Example news source to scrape for stock tickers
    news_url = "https://www.marketwatch.com/latest-news"
    
    # Scrape news articles for potential volatile stocks
    stock_tickers = scrape_news_articles(news_url)
    
    if not stock_tickers:
        print("No stock tickers found in news articles.")
        return

    for stock in stock_tickers:
        try:
            # Analyze stock using OpenBB
            macd_crossover, rsi_overbought, rsi_oversold = analyze_stock_with_openbb(stock)

            # Predict buy_call based on technical analysis
            buy_call = macd_crossover and rsi_oversold
            
            # Example: Execute a trade based on the analysis
            trade_stock(stock, buy_call)

        except Exception as e:
            print(f"Error analyzing {stock}: {e}")

if __name__ == "__main__":
    main()
