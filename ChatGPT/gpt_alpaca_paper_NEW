#### 1: Set up environment
import yfinance as yf
import requests
import numpy as np
import ta
import gym
from gym import spaces
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from sklearn.ensemble import RandomForestClassifier
from alpaca_trade_api.rest import REST
from stable_baselines3 import A2C
from stable_baselines3.common.vec_env import DummyVecEnv
from stable_baselines3.common.env_checker import check_env
from cvxopt import matrix, solvers
from datetime import datetime
from alpaca.trading.client import TradingClient
from alpaca.trading.requests import GetAssetsRequest
from alpaca.trading.enums import OrderSide, TimeInForce

## View account information
trading_client = TradingClient('PA3NRFGUO5AU', 'PKLLPAIZVPAFBTCF72XM')

# Get our account information
account = trading_client.get_account()

# Check if our account is restricted from trading
if account.trading_blocked:
    print('Account is currently restricted from trading.')

# Check how much money we can use to open new positions
print('${} is available as buying power.'.format(account.buying_power))
balance_change = float(account.equity) - float(account.last_equity)
print(f'Today\'s portfolio balance change: ${balance_change}')

#### 2: Data Collection and Integration
# API keys for various data sources
NEWSAPI_KEY = 'bcec8fa2304344b5892af472fab2a6b0'
ALPACA_API_KEY = 'PA3NRFGUO5AU'
ALPACA_SECRET_KEY = 'PKLLPAIZVPAFBTCF72XM'
BASE_URL = 'https://paper-api.alpaca.markets'

def get_news_data(ticker):
    url = f"https://newsapi.org/v2/everything?q={ticker}&apiKey={NEWSAPI_KEY}"
    response = requests.get(url)
    return response.json()

def get_social_mentions(ticker):
    # Example placeholder for social mentions (e.g., Reddit, Twitter)
    # Implement with actual API calls to get trending stock data
    return {"ticker": ticker, "mentions": np.random.randint(50, 200)}

def analyze_sentiment(text):
    sid = SentimentIntensityAnalyzer()
    sentiment = sid.polarity_scores(text)
    return sentiment['compound']

def collect_data(tickers):
    news_sentiments = {}
    for ticker in tickers:
        news_data = get_news_data(ticker)
        sentiment_scores = [analyze_sentiment(article['title']) for article in news_data['articles']]
        avg_sentiment = sum(sentiment_scores) / len(sentiment_scores) if sentiment_scores else 0
        
        mentions = get_social_mentions(ticker)['mentions']
        news_sentiments[ticker] = (avg_sentiment, mentions)
    
    return news_sentiments

#### 3: Define Gym Environment
class TradingEnvironment(gym.Env):
    def __init__(self, data):
        super(TradingEnvironment, self).__init__()
        self.data = data
        self.current_step = 0
        self.done = False

        # Define action and observation space
        self.action_space = spaces.Discrete(2)  # Buy or sell
        self.observation_space = spaces.Box(low=-np.inf, high=np.inf, shape=(data.shape[1],), dtype=np.float32)

    def reset(self):
        self.current_step = 0
        self.done = False
        return self.data.iloc[self.current_step].values

    def step(self, action):
        self.current_step += 1
        if self.current_step >= len(self.data):
            self.done = True
        reward = self._calculate_reward(action)
        obs = self.data.iloc[self.current_step].values if not self.done else np.zeros(self.observation_space.shape)
        return obs, reward, self.done, {}

    def _calculate_reward(self, action):
        # Implement reward calculation based on action and market performance
        return np.random.random()  # Placeholder

    def render(self, mode='human'):
        # Render the environment (optional)
        pass

    def close(self):
        # Clean up the environment (optional)
        pass

#### 4: Reinforcement Learning
def prepare_rl_data(ticker):
    data = yf.download(ticker, start='2023-01-01', end=datetime.today().strftime('%Y-%m-%d'))
    data['RSI'] = ta.momentum.RSIIndicator(data['Close']).rsi()
    data['MACD_diff'] = ta.trend.MACD(data['Close']).macd_diff()
    data['SMA'] = ta.trend.SMAIndicator(data['Close'], window=14).sma_indicator()
    return data.dropna()

def train_model(ticker):
    data = prepare_rl_data(ticker)
    env = TradingEnvironment(data)
    vec_env = DummyVecEnv([lambda: env])
    
    # Check if the environment is valid
    check_env(env)
    
    model = A2C('MlpPolicy', vec_env, verbose=1)
    model.learn(total_timesteps=10000)
    return model

#### 5: Portfolio Optimization
def optimize_portfolio(returns):
    n = len(returns.columns)
    returns_mean = np.mean(returns, axis=0)
    cov_matrix = np.cov(returns.T)

    P = matrix(cov_matrix)
    q = matrix(np.zeros(n))
    G = matrix(-np.eye(n))
    h = matrix(np.zeros(n))
    A = matrix(1.0, (1, n))
    b = matrix(1.0)

    sol = solvers.qp(P, q, G, h, A, b)
    weights = np.array(sol['x']).flatten()
    return weights

#### 6: Automated Ticker Selection
def select_stocks(data):
    positive_stocks = {ticker: sentiment for ticker, sentiment in data.items() if sentiment[0] > 0.5 and sentiment[1] > 100}
    return list(positive_stocks.keys())

#### 7: Alpaca Integration
def execute_trade(ticker, signal):
    alpaca = REST(ALPACA_API_KEY, ALPACA_SECRET_KEY, base_url='https://paper-api.alpaca.markets')
    
    if signal == 1:  # Buy Signal
        alpaca.submit_order(
            symbol=ticker,
            qty=10,  # Define your qty or position sizing logic
            side='buy',
            type='market',
            time_in_force='gtc'
        )
    else:  # Sell Signal
        alpaca.submit_order(
            symbol=ticker,
            qty=10,  # Define your qty or position sizing logic
            side='sell',
            type='market',
            time_in_force='gtc'
        )

#### 8: Main Function
def main():
    tickers = ["AAPL", "TSLA", "MSFT", "AMZN"]
    collected_data = collect_data(tickers)
    selected_stocks = select_stocks(collected_data)

    for stock in selected_stocks:
        model = train_model(stock)
        
        # Prepare environment and make predictions
        data = prepare_rl_data(stock)
        env = TradingEnvironment(data)
        vec_env = DummyVecEnv([lambda: env])
        
        last_signal = model.predict(env.reset())[0]
        execute_trade(stock, last_signal)
        
        # Optimize portfolio based on historical returns
        returns = data.pct_change().dropna()
        weights = optimize_portfolio(returns)
        print(f"Optimized Portfolio Weights for {stock}: {weights}")

#### 9: Check Order Status
def check_order_status(order_id):
    alpaca = REST(ALPACA_API_KEY, ALPACA_SECRET_KEY, base_url='https://paper-api.alpaca.markets')
    order = alpaca.get_order(order_id)
    print(f"Order Status: {order.status}")
    return order


main()
