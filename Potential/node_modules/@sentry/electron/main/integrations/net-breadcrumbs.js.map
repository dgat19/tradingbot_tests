{"version":3,"file":"net-breadcrumbs.js","sources":["../../src/src/main/integrations/net-breadcrumbs.ts"],"sourcesContent":["import {\n  addBreadcrumb,\n  defineIntegration,\n  getClient,\n  getCurrentScope,\n  getDynamicSamplingContextFromClient,\n  getDynamicSamplingContextFromSpan,\n  getIsolationScope,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SentryNonRecordingSpan,\n  setHttpStatus,\n  spanToTraceHeader,\n  startInactiveSpan,\n} from '@sentry/core';\nimport { DynamicSamplingContext, TracePropagationTargets } from '@sentry/types';\nimport {\n  dynamicSamplingContextToSentryBaggageHeader,\n  fill,\n  generateSentryTraceHeader,\n  logger,\n  LRUMap,\n  stringMatchesSomePattern,\n} from '@sentry/utils';\nimport { ClientRequest, ClientRequestConstructorOptions, IncomingMessage, net as electronNet } from 'electron';\nimport * as urlModule from 'url';\n\ntype ShouldTraceFn = (method: string, url: string) => boolean;\n\nexport interface NetOptions {\n  /**\n   * Whether breadcrumbs should be captured for net requests\n   *\n   * Defaults to: true\n   */\n  breadcrumbs?: boolean;\n  /**\n   * Whether to capture transaction spans for net requests\n   *\n   * true | false | (method: string, url: string) => boolean\n   * Defaults to: true\n   */\n  tracing?: ShouldTraceFn | boolean;\n}\n\n/**\n * Trimmed down version of the code from Electron here:\n * https://github.com/electron/electron/blob/f3df76dbdc58cb704637b89357e1400791c92cfe/lib/browser/api/net.ts#L209-L269\n *\n * We want to match the final URL that Electron uses\n */\nfunction parseOptions(optionsIn: ClientRequestConstructorOptions | string): { method: string; url: string } {\n  const { method, options } =\n    typeof optionsIn === 'string'\n      ? // eslint-disable-next-line deprecation/deprecation\n        { method: 'GET', options: urlModule.parse(optionsIn) }\n      : { method: (optionsIn.method || 'GET').toUpperCase(), options: optionsIn };\n\n  let url = 'url' in options ? options.url : undefined;\n\n  if (!url) {\n    const urlObj: urlModule.UrlObject = {};\n    urlObj.protocol = options.protocol || 'http:';\n\n    if (options.host) {\n      urlObj.host = options.host;\n    } else {\n      if (options.hostname) {\n        urlObj.hostname = options.hostname;\n      } else {\n        urlObj.hostname = 'localhost';\n      }\n\n      if (options.port) {\n        urlObj.port = options.port;\n      }\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const pathObj = urlModule.parse(options.path || '/');\n    urlObj.pathname = pathObj.pathname;\n    urlObj.search = pathObj.search;\n    urlObj.hash = pathObj.hash;\n    url = urlModule.format(urlObj);\n  }\n\n  return {\n    method,\n    url,\n  };\n}\n\nfunction addHeadersToRequest(\n  request: Electron.ClientRequest,\n  url: string,\n  sentryTraceHeader: string,\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>,\n): void {\n  logger.log(`[Tracing] Adding sentry-trace header ${sentryTraceHeader} to outgoing request to \"${url}\": `);\n  request.setHeader('sentry-trace', sentryTraceHeader);\n\n  const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n  if (sentryBaggageHeader) {\n    request.setHeader('baggage', sentryBaggageHeader);\n  }\n}\n\ntype RequestOptions = string | ClientRequestConstructorOptions;\ntype RequestMethod = (opt: RequestOptions) => ClientRequest;\ntype WrappedRequestMethodFactory = (original: RequestMethod) => RequestMethod;\n\nfunction createWrappedRequestFactory(\n  options: NetOptions,\n  tracePropagationTargets: TracePropagationTargets | undefined,\n): WrappedRequestMethodFactory {\n  // We're caching results so we don't have to recompute regexp every time we create a request.\n  const createSpanUrlMap = new LRUMap<string, boolean>(100);\n  const headersUrlMap = new LRUMap<string, boolean>(100);\n\n  const shouldCreateSpan = (method: string, url: string): boolean => {\n    if (options.tracing === undefined) {\n      return true;\n    }\n\n    if (options.tracing === false) {\n      return false;\n    }\n\n    const key = `${method}:${url}`;\n\n    const cachedDecision = createSpanUrlMap.get(key);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = options.tracing === true || options.tracing(method, url);\n    createSpanUrlMap.set(key, decision);\n    return decision;\n  };\n\n  // This will be considerably simpler once `tracingOrigins` is removed in the next major release\n  const shouldAttachTraceData = (method: string, url: string): boolean => {\n    const key = `${method}:${url}`;\n\n    const cachedDecision = headersUrlMap.get(key);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    if (tracePropagationTargets) {\n      const decision = stringMatchesSomePattern(url, tracePropagationTargets);\n      headersUrlMap.set(key, decision);\n      return decision;\n    }\n\n    // We cannot reach here since either `tracePropagationTargets` or `tracingOrigins` will be defined but TypeScript\n    // cannot infer that\n    return true;\n  };\n\n  return function wrappedRequestMethodFactory(originalRequestMethod: RequestMethod): RequestMethod {\n    return function requestMethod(this: typeof electronNet, reqOptions: RequestOptions): ClientRequest {\n      const { url, method } = parseOptions(reqOptions);\n      const request = originalRequestMethod.apply(this, [reqOptions]) as ClientRequest;\n\n      if (url.match(/sentry_key/) || request.getHeader('x-sentry-auth')) {\n        return request;\n      }\n\n      const span = shouldCreateSpan(method, url)\n        ? startInactiveSpan({\n            name: `${method} ${url}`,\n            onlyIfParent: true,\n            attributes: {\n              url,\n              type: 'net.request',\n              'http.method': method,\n            },\n            op: 'http.client',\n          })\n        : new SentryNonRecordingSpan();\n\n      span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.http.electron.net');\n\n      if (shouldAttachTraceData(method, url)) {\n        const { traceId, spanId, sampled, dsc } = {\n          ...getIsolationScope().getPropagationContext(),\n          ...getCurrentScope().getPropagationContext(),\n        };\n\n        if (span.isRecording()) {\n          const sentryTraceHeader = spanToTraceHeader(span);\n          const dynamicSamplingContext = dsc || getDynamicSamplingContextFromSpan(span);\n\n          addHeadersToRequest(request, url, sentryTraceHeader, dynamicSamplingContext);\n        } else {\n          const sentryTraceHeader = generateSentryTraceHeader(traceId, spanId, sampled);\n\n          const client = getClient();\n          const dynamicSamplingContext =\n            dsc || (client ? getDynamicSamplingContextFromClient(traceId, client) : undefined);\n\n          addHeadersToRequest(request, url, sentryTraceHeader, dynamicSamplingContext);\n        }\n      }\n\n      return request\n        .once('response', function (this: ClientRequest, res: IncomingMessage): void {\n          if (options.breadcrumbs !== false) {\n            addRequestBreadcrumb('response', method, url, this, res);\n          }\n\n          if (res.statusCode) {\n            setHttpStatus(span, res.statusCode);\n          }\n\n          span.end();\n        })\n        .once('error', function (this: ClientRequest, _error: Error): void {\n          if (options.breadcrumbs !== false) {\n            addRequestBreadcrumb('error', method, url, this, undefined);\n          }\n\n          setHttpStatus(span, 500);\n          span.end();\n        });\n    };\n  };\n}\n\n/**\n * Captures Breadcrumb based on provided request/response pair\n */\nfunction addRequestBreadcrumb(\n  event: string,\n  method: string,\n  url: string,\n  req: ClientRequest,\n  res?: IncomingMessage,\n): void {\n  addBreadcrumb(\n    {\n      type: 'http',\n      category: 'electron.net',\n      data: {\n        url,\n        method: method,\n        status_code: res?.statusCode,\n      },\n    },\n    {\n      event,\n      request: req,\n      response: res,\n    },\n  );\n}\n\n/**\n * Electron 'net' module integration\n */\nexport const electronNetIntegration = defineIntegration((options: NetOptions = {}) => {\n  return {\n    name: 'ElectronNet',\n    setup() {\n      const clientOptions = getClient()?.getOptions();\n\n      // No need to instrument if we don't want to track anything\n      if (options.breadcrumbs === false && options.tracing === false) {\n        return;\n      }\n\n      fill(electronNet, 'request', createWrappedRequestFactory(options, clientOptions?.tracePropagationTargets));\n    },\n  };\n});\n"],"names":["urlModule","logger","dynamicSamplingContextToSentryBaggageHeader","LRUMap","stringMatchesSomePattern","startInactiveSpan","SentryNonRecordingSpan","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","getIsolationScope","getCurrentScope","spanToTraceHeader","getDynamicSamplingContextFromSpan","generateSentryTraceHeader","getClient","getDynamicSamplingContextFromClient","setHttpStatus","addBreadcrumb","defineIntegration","fill","electronNet"],"mappings":"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"}