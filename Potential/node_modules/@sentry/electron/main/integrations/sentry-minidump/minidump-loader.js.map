{"version":3,"file":"minidump-loader.js","sources":["../../../src/src/main/integrations/sentry-minidump/minidump-loader.ts"],"sourcesContent":["import { Attachment } from '@sentry/types';\nimport { basename, logger } from '@sentry/utils';\nimport { app } from 'electron';\nimport { promises as fs } from 'fs';\nimport { join } from 'path';\n\nimport { usesCrashpad } from '../../electron-normalize';\nimport { Mutex } from '../../mutex';\n\n/** Maximum number of days to keep a minidump before deleting it. */\nconst MAX_AGE_DAYS = 30;\nconst MS_PER_DAY = 24 * 3_600 * 1_000;\n/** Minimum number of milliseconds a minidump should not be modified for before we assume writing is complete */\nconst NOT_MODIFIED_MS = 1_000;\nconst MAX_RETRY_MS = 5_000;\nconst RETRY_DELAY_MS = 500;\nconst MAX_RETRIES = MAX_RETRY_MS / RETRY_DELAY_MS;\n\nconst MINIDUMP_HEADER = 'MDMP';\n\nfunction delay(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/**\n * A function that loads minidumps\n * @param deleteAll Whether to just delete all minidumps\n * @param callback A callback to call with the attachment ready to send\n */\nexport type MinidumpLoader = (deleteAll: boolean, callback: (attachment: Attachment) => void) => Promise<void>;\n\n/**\n * Creates a minidump loader\n * @param getMinidumpPaths A function that returns paths to minidumps\n * @param preProcessFile A function that pre-processes the minidump file\n * @returns A function to fetch minidumps\n */\nexport function createMinidumpLoader(\n  getMinidumpPaths: () => Promise<string[]>,\n  preProcessFile: (file: Buffer) => Buffer = (file) => file,\n): MinidumpLoader {\n  // The mutex protects against a whole host of reentrancy issues and race conditions.\n  const mutex = new Mutex();\n\n  return async (deleteAll, callback) => {\n    // any calls to this function will be queued and run exclusively\n    await mutex.runExclusive(async () => {\n      for (const path of await getMinidumpPaths()) {\n        try {\n          if (deleteAll) {\n            continue;\n          }\n\n          logger.log('Found minidump', path);\n\n          let stats = await fs.stat(path);\n\n          const thirtyDaysAgo = new Date().getTime() - MAX_AGE_DAYS * MS_PER_DAY;\n\n          if (stats.mtimeMs < thirtyDaysAgo) {\n            logger.log(`Ignoring minidump as it is over ${MAX_AGE_DAYS} days old`);\n            continue;\n          }\n\n          let retries = 0;\n\n          while (retries <= MAX_RETRIES) {\n            const twoSecondsAgo = new Date().getTime() - NOT_MODIFIED_MS;\n\n            if (stats.mtimeMs < twoSecondsAgo) {\n              const file = await fs.readFile(path);\n              const data = preProcessFile(file);\n\n              if (data.length < 10_000 || data.subarray(0, 4).toString() !== MINIDUMP_HEADER) {\n                logger.warn('Dropping minidump as it appears invalid.');\n                break;\n              }\n\n              logger.log('Sending minidump');\n\n              callback({\n                attachmentType: 'event.minidump',\n                filename: basename(path),\n                data,\n              });\n\n              break;\n            }\n\n            logger.log(`Waiting. Minidump has been modified in the last ${NOT_MODIFIED_MS} milliseconds.`);\n            retries += 1;\n            await delay(RETRY_DELAY_MS);\n            // update the stats\n            stats = await fs.stat(path);\n          }\n\n          if (retries >= MAX_RETRIES) {\n            logger.warn('Timed out waiting for minidump to stop being modified');\n          }\n        } catch (e) {\n          logger.error('Failed to load minidump', e);\n        } finally {\n          // We always attempt to delete the minidump\n          try {\n            await fs.unlink(path);\n          } catch (e) {\n            logger.warn('Could not delete minidump', path);\n          }\n        }\n      }\n    });\n  };\n}\n\n/** Attempts to remove the metadata file so Crashpad doesn't output `failed to stat report` errors to the console */\nasync function deleteCrashpadMetadataFile(crashesDirectory: string, waitMs: number = 100): Promise<void> {\n  if (waitMs > 2_000) {\n    return;\n  }\n\n  const metadataPath = join(crashesDirectory, 'metadata');\n  try {\n    await fs.unlink(metadataPath);\n    logger.log('Deleted Crashpad metadata file', metadataPath);\n  } catch (e: any) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (e.code && e.code == 'EBUSY') {\n      // Since Crashpad probably still has the metadata file open, we make a few attempts to delete it, backing\n      // off and waiting longer each time.\n      setTimeout(async () => {\n        await deleteCrashpadMetadataFile(crashesDirectory, waitMs * 2);\n      }, waitMs);\n    }\n  }\n}\n\nasync function readDirsAsync(paths: string[]): Promise<string[]> {\n  const found: string[] = [];\n  for (const path of paths) {\n    try {\n      const files = await fs.readdir(path);\n      found.push(...files.map((file) => join(path, file)));\n    } catch (_) {\n      //\n    }\n  }\n  return found;\n}\n\nfunction crashpadMinidumpLoader(): MinidumpLoader {\n  const crashesDirectory: string = app.getPath('crashDumps');\n  const crashpadSubDirectory = process.platform === 'win32' ? 'reports' : 'completed';\n\n  const dumpDirectories = [join(crashesDirectory, crashpadSubDirectory)];\n\n  if (process.platform === 'darwin') {\n    dumpDirectories.push(join(crashesDirectory, 'pending'));\n  }\n\n  return createMinidumpLoader(async () => {\n    await deleteCrashpadMetadataFile(crashesDirectory).catch((error) => logger.error(error));\n    const files = await readDirsAsync(dumpDirectories);\n    return files.filter((file) => file.endsWith('.dmp'));\n  });\n}\n\n/** Crudely parses the minidump from the Breakpad multipart file */\nfunction minidumpFromBreakpadMultipart(file: Buffer): Buffer {\n  const binaryStart = file.lastIndexOf('Content-Type: application/octet-stream');\n  if (binaryStart > 0) {\n    const dumpStart = file.indexOf(MINIDUMP_HEADER, binaryStart);\n    const dumpEnd = file.lastIndexOf('----------------------------');\n\n    if (dumpStart > 0 && dumpEnd > 0 && dumpEnd > dumpStart) {\n      return file.subarray(dumpStart, dumpEnd);\n    }\n  }\n\n  return file;\n}\n\nfunction removeBreakpadMetadata(crashesDirectory: string, paths: string[]): void {\n  // Remove all metadata files and forget about them.\n  Promise.all(\n    paths\n      .filter((file) => file.endsWith('.txt') && !file.endsWith('log.txt'))\n      .map(async (file) => {\n        const path = join(crashesDirectory, file);\n        try {\n          await fs.unlink(path);\n        } catch (e) {\n          logger.warn('Could not delete', path);\n        }\n      }),\n  ).catch(() => {\n    // ignore since we catch each unlink individually\n  });\n}\n\nfunction breakpadMinidumpLoader(): MinidumpLoader {\n  const crashesDirectory: string = app.getPath('crashDumps');\n\n  return createMinidumpLoader(async () => {\n    // Breakpad stores all minidump files along with a metadata file directly in\n    // the crashes directory.\n    const files = await fs.readdir(crashesDirectory);\n    removeBreakpadMetadata(crashesDirectory, files);\n    return files.filter((file) => file.endsWith('.dmp')).map((file) => join(crashesDirectory, file));\n  }, minidumpFromBreakpadMultipart);\n}\n\n/**\n * Gets the minidump loader\n */\nexport function getMinidumpLoader(): MinidumpLoader {\n  return usesCrashpad() ? crashpadMinidumpLoader() : breakpadMinidumpLoader();\n}\n"],"names":["mutex","Mutex","logger","fs","basename","join","path","app","usesCrashpad"],"mappings":"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"}