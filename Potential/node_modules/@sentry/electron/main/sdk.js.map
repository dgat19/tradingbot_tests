{"version":3,"file":"sdk.js","sources":["../src/src/main/sdk.ts"],"sourcesContent":["import { getIntegrationsToSetup } from '@sentry/core';\nimport {\n  consoleIntegration,\n  contextLinesIntegration,\n  functionToStringIntegration,\n  getCurrentScope,\n  inboundFiltersIntegration,\n  initOpenTelemetry,\n  linkedErrorsIntegration,\n  localVariablesIntegration,\n  nativeNodeFetchIntegration,\n  NodeClient,\n  nodeContextIntegration,\n  NodeOptions,\n  onUnhandledRejectionIntegration,\n  setNodeAsyncContextStrategy,\n} from '@sentry/node';\nimport { Integration, Options } from '@sentry/types';\nimport { logger, stackParserFromStackParserOptions } from '@sentry/utils';\nimport { Session, session, WebContents } from 'electron';\n\nimport { IPCMode } from '../common/ipc';\nimport { getDefaultEnvironment, getDefaultReleaseName, getSdkInfo } from './context';\nimport { additionalContextIntegration } from './integrations/additional-context';\nimport { childProcessIntegration } from './integrations/child-process';\nimport { electronBreadcrumbsIntegration } from './integrations/electron-breadcrumbs';\nimport { electronContextIntegration } from './integrations/electron-context';\nimport { mainProcessSessionIntegration } from './integrations/main-process-session';\nimport { electronNetIntegration } from './integrations/net-breadcrumbs';\nimport { normalizePathsIntegration } from './integrations/normalize-paths';\nimport { onUncaughtExceptionIntegration } from './integrations/onuncaughtexception';\nimport { preloadInjectionIntegration } from './integrations/preload-injection';\nimport { rendererProfilingIntegration } from './integrations/renderer-profiling';\nimport { screenshotsIntegration } from './integrations/screenshots';\nimport { sentryMinidumpIntegration } from './integrations/sentry-minidump';\nimport { configureIPC } from './ipc';\nimport { defaultStackParser } from './stack-parse';\nimport { ElectronOfflineTransportOptions, makeElectronOfflineTransport } from './transports/electron-offline-net';\nimport { configureUtilityProcessIPC } from './utility-processes';\n\n/** Get the default integrations for the main process SDK. */\nexport function getDefaultIntegrations(options: ElectronMainOptions): Integration[] {\n  const integrations = [\n    // Electron integrations\n    sentryMinidumpIntegration(), // we want this to run first as it enables the native crash handler\n    electronBreadcrumbsIntegration(),\n    electronNetIntegration(),\n    electronContextIntegration(),\n    childProcessIntegration(),\n    normalizePathsIntegration(),\n    onUncaughtExceptionIntegration(),\n    preloadInjectionIntegration(),\n    additionalContextIntegration(),\n    screenshotsIntegration(),\n\n    // Node integrations\n    inboundFiltersIntegration(),\n    functionToStringIntegration(),\n    linkedErrorsIntegration(),\n    consoleIntegration(),\n    nativeNodeFetchIntegration(),\n    onUnhandledRejectionIntegration(),\n    contextLinesIntegration(),\n    localVariablesIntegration(),\n    nodeContextIntegration({ cloudResource: false }),\n  ];\n\n  if (options.autoSessionTracking !== false) {\n    integrations.push(mainProcessSessionIntegration());\n  }\n\n  if (options.attachScreenshot) {\n    integrations.push(screenshotsIntegration());\n  }\n\n  if (options.enableRendererProfiling) {\n    integrations.push(rendererProfilingIntegration());\n  }\n\n  return integrations;\n}\n\nexport interface ElectronMainOptionsInternal\n  extends Options<ElectronOfflineTransportOptions>,\n    Omit<NodeOptions, 'transport' | 'transportOptions'> {\n  /**\n   * Inter-process communication mode to receive event and scope from renderers\n   *\n   * IPCMode.Classic - Configures Electron IPC\n   * IPCMode.Protocol - Configures a custom protocol\n   * IPCMode.Both - Configures both IPC and custom protocol\n   *\n   * defaults to IPCMode.Both for maximum compatibility\n   */\n  ipcMode: IPCMode;\n\n  /**\n   * A function that returns an array of Electron session objects\n   *\n   * These sessions are used to configure communication between the Electron\n   * main and renderer processes.\n   *\n   * Defaults to () => [session.defaultSession]\n   */\n  getSessions: () => Session[];\n\n  /**\n   * Callback to allow custom naming of renderer processes.\n   *\n   * If the callback is not set, or it returns `undefined`, the default naming\n   * scheme is used.\n   */\n  getRendererName?: (contents: WebContents) => string | undefined;\n\n  /**\n   * Screenshots may contain PII and is an opt-in feature\n   *\n   * If set to true, screenshots will be captured and included with all JavaScript events.\n   * Screenshots are not included for native crashes since it's not possible to capture images of crashed Electron\n   * renderers.\n   */\n  attachScreenshot?: boolean;\n\n  /**\n   * Enables injection of 'js-profiling' document policy headers and ensure profiles are forwarded with transactions\n   */\n  enableRendererProfiling?: boolean;\n}\n\n// getSessions and ipcMode properties are optional because they have defaults\nexport type ElectronMainOptions = Pick<Partial<ElectronMainOptionsInternal>, 'getSessions' | 'ipcMode'> &\n  Omit<ElectronMainOptionsInternal, 'getSessions' | 'ipcMode'> &\n  NodeOptions;\n\n/**\n * Initialize Sentry in the Electron main process\n */\nexport function init(userOptions: ElectronMainOptions): void {\n  const optionsWithDefaults = {\n    _metadata: { sdk: getSdkInfo() },\n    ipcMode: IPCMode.Both,\n    release: getDefaultReleaseName(),\n    environment: getDefaultEnvironment(),\n    defaultIntegrations: getDefaultIntegrations(userOptions),\n    transport: makeElectronOfflineTransport(),\n    transportOptions: {},\n    getSessions: () => [session.defaultSession],\n    ...userOptions,\n    stackParser: stackParserFromStackParserOptions(userOptions.stackParser || defaultStackParser),\n  };\n\n  const options = {\n    ...optionsWithDefaults,\n    integrations: getIntegrationsToSetup(optionsWithDefaults),\n  };\n\n  if (options.debug) {\n    logger.enable();\n  }\n\n  removeRedundantIntegrations(options);\n  configureIPC(options);\n  configureUtilityProcessIPC();\n\n  setNodeAsyncContextStrategy();\n\n  const scope = getCurrentScope();\n  scope.update(options.initialScope);\n\n  const client = new NodeClient(options);\n  scope.setClient(client);\n  client.init();\n\n  // If users opt-out of this, they _have_ to set up OpenTelemetry themselves\n  // There is no way to use this SDK without OpenTelemetry!\n  if (!options.skipOpenTelemetrySetup) {\n    initOpenTelemetry(client);\n  }\n}\n\n/** A list of integrations which cause default integrations to be removed */\nconst INTEGRATION_OVERRIDES = [\n  { userAdded: 'ElectronMinidump', toRemove: 'SentryMinidump' },\n  { userAdded: 'BrowserWindowSession', toRemove: 'MainProcessSession' },\n];\n\n/** Sets the default integrations and ensures that multiple minidump or session integrations are not enabled */\nfunction removeRedundantIntegrations(\n  // At this point we know that the integrations are an array\n  options: { integrations: Integration[] },\n): void {\n  for (const { userAdded, toRemove } of INTEGRATION_OVERRIDES) {\n    if (options.integrations.some((i) => i.name === userAdded)) {\n      options.integrations = options.integrations.filter((i) => i.name !== toRemove);\n    }\n  }\n}\n"],"names":["sentryMinidumpIntegration","electronBreadcrumbsIntegration","electronNetIntegration","electronContextIntegration","childProcessIntegration","normalizePathsIntegration","onUncaughtExceptionIntegration","preloadInjectionIntegration","additionalContextIntegration","screenshotsIntegration","inboundFiltersIntegration","functionToStringIntegration","linkedErrorsIntegration","consoleIntegration","nativeNodeFetchIntegration","onUnhandledRejectionIntegration","contextLinesIntegration","localVariablesIntegration","nodeContextIntegration","mainProcessSessionIntegration","rendererProfilingIntegration","getSdkInfo","IPCMode","getDefaultReleaseName","getDefaultEnvironment","makeElectronOfflineTransport","session","stackParserFromStackParserOptions","defaultStackParser","getIntegrationsToSetup","logger","configureIPC","configureUtilityProcessIPC","setNodeAsyncContextStrategy","getCurrentScope","NodeClient","initOpenTelemetry"],"mappings":"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"}