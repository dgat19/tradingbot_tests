import { OfflineTransportOptions } from '@sentry/core';
import { BaseTransportOptions, Envelope, Transport } from '@sentry/types';
import { ElectronNetTransportOptions } from './electron-net';
import { OfflineStoreOptions } from './offline-store';
export type ElectronOfflineTransportOptions = ElectronNetTransportOptions & OfflineTransportOptions & Partial<OfflineStoreOptions> & {
    /**
     * Should we attempt to send the envelope to Sentry.
     * If this function returns false, `shouldStore` will be called to determine if the envelope should be stored.
     *
     * Default: () => true
     *
     * @param envelope The envelope that will be sent.
     * @returns Whether we should attempt to send the envelope
     */
    shouldSend?: (envelope: Envelope) => boolean | Promise<boolean>;
};
/**
 * Creates a Transport that uses Electrons net module to send events to Sentry. When they fail to send they are
 * persisted to disk and sent later
 */
export declare function makeElectronOfflineTransport<T extends BaseTransportOptions>(baseTransport?: (opt: T & ElectronOfflineTransportOptions) => Transport): (options: T & ElectronOfflineTransportOptions) => Transport;
//# sourceMappingURL=electron-offline-net.d.ts.map