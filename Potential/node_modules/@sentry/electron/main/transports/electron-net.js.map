{"version":3,"file":"electron-net.js","sources":["../../src/src/main/transports/electron-net.ts"],"sourcesContent":["import { createTransport } from '@sentry/core';\nimport {\n  BaseTransportOptions,\n  Transport,\n  TransportMakeRequestResponse,\n  TransportRequest,\n  TransportRequestExecutor,\n} from '@sentry/types';\nimport { dropUndefinedKeys } from '@sentry/utils';\nimport { app, net } from 'electron';\nimport { Readable, Writable } from 'stream';\nimport { URL } from 'url';\nimport { createGzip } from 'zlib';\n\nexport interface ElectronNetTransportOptions extends BaseTransportOptions {\n  /** Define custom headers */\n  headers?: Record<string, string>;\n}\n\n// Estimated maximum size for reasonable standalone event\nconst GZIP_THRESHOLD = 1024 * 32;\n\n/**\n * Gets a stream from a Buffer or string\n * We don't have Readable.from in earlier versions of node\n */\nfunction streamFromBody(body: string | Uint8Array): Readable {\n  return new Readable({\n    read() {\n      this.push(body);\n      this.push(null);\n    },\n  });\n}\n\nfunction getRequestOptions(url: string): Electron.ClientRequestConstructorOptions {\n  const { hostname, pathname, port, protocol, search } = new URL(url);\n\n  return {\n    method: 'POST',\n    hostname,\n    path: `${pathname}${search}`,\n    port: parseInt(port, 10),\n    protocol,\n  };\n}\n\n/**\n * Creates a Transport that uses Electrons net module to send events to Sentry.\n */\nexport function makeElectronTransport(options: ElectronNetTransportOptions): Transport {\n  return createTransport(options, createElectronNetRequestExecutor(options.url, options.headers || {}));\n}\n\n/**\n * Creates a RequestExecutor to be used with `createTransport`.\n */\nexport function createElectronNetRequestExecutor(\n  url: string,\n  baseHeaders: Record<string, string>,\n): TransportRequestExecutor {\n  baseHeaders['Content-Type'] = 'application/x-sentry-envelope';\n\n  return function makeRequest(request: TransportRequest): Promise<TransportMakeRequestResponse> {\n    return app.whenReady().then(\n      () =>\n        new Promise((resolve, reject) => {\n          let bodyStream = streamFromBody(request.body);\n\n          const headers = { ...baseHeaders };\n\n          if (request.body.length > GZIP_THRESHOLD) {\n            headers['content-encoding'] = 'gzip';\n            bodyStream = bodyStream.pipe(createGzip());\n          }\n\n          const req = net.request(getRequestOptions(url));\n\n          for (const [header, value] of Object.entries(headers)) {\n            req.setHeader(header, value);\n          }\n\n          req.on('response', (res) => {\n            res.on('error', reject);\n\n            res.on('data', () => {\n              // Drain socket\n            });\n\n            res.on('end', () => {\n              // Drain socket\n            });\n\n            // \"Key-value pairs of header names and values. Header names are lower-cased.\"\n            // https://nodejs.org/api/http.html#http_message_headers\n            const retryAfterHeader = res.headers['retry-after'] ?? null;\n            const rateLimitsHeader = res.headers['x-sentry-rate-limits'] ?? null;\n\n            resolve({\n              statusCode: res.statusCode,\n              headers: dropUndefinedKeys({\n                'retry-after': Array.isArray(retryAfterHeader) ? retryAfterHeader[0] || null : retryAfterHeader,\n                'x-sentry-rate-limits': Array.isArray(rateLimitsHeader)\n                  ? rateLimitsHeader[0] || null\n                  : rateLimitsHeader,\n              }),\n            });\n          });\n\n          req.on('error', reject);\n\n          // The docs say that ClientRequest is Writable but the types don't match exactly\n          bodyStream.pipe(req as unknown as Writable);\n        }),\n    );\n  };\n}\n"],"names":["Readable","URL","createTransport","app","createGzip","net","dropUndefinedKeys"],"mappings":"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"}