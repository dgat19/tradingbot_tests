{"version":3,"file":"offline-store.js","sources":["../../src/src/main/transports/offline-store.ts"],"sourcesContent":["import { OfflineStore } from '@sentry/core';\nimport { Envelope } from '@sentry/types';\nimport { logger, parseEnvelope, serializeEnvelope, uuid4 } from '@sentry/utils';\nimport { promises as fs } from 'fs';\nimport { join } from 'path';\n\nimport { getSentryCachePath } from '../electron-normalize';\nimport { Store } from '../store';\n\n/** Internal type used to expose the envelope date without having to read it into memory */\ninterface PersistedRequest {\n  id: string;\n  date: Date;\n}\n\nexport interface OfflineStoreOptions {\n  /**\n   * Path to the offline queue directory.\n   */\n  queuePath: string;\n  /**\n   * Maximum number of days to store requests.\n   */\n  maxAgeDays: number;\n  /**\n   * Maximum number of requests to store.\n   */\n  maxQueueSize: number;\n}\n\nconst MILLISECONDS_PER_DAY = 86_400_000;\n\nfunction isOutdated(request: PersistedRequest, maxAgeDays: number): boolean {\n  const cutOff = Date.now() - MILLISECONDS_PER_DAY * maxAgeDays;\n  return request.date.getTime() < cutOff;\n}\n\nfunction getSentAtFromEnvelope(envelope: Envelope): Date | undefined {\n  const header = envelope[0];\n  if (typeof header.sent_at === 'string') {\n    return new Date(header.sent_at);\n  }\n  return undefined;\n}\n\n/**\n * Creates a new offline store.\n */\nexport function createOfflineStore(userOptions: Partial<OfflineStoreOptions>): OfflineStore {\n  function log(...args: unknown[]): void {\n    logger.log(`[Offline Store]:`, ...args);\n  }\n\n  const options: OfflineStoreOptions = {\n    maxAgeDays: userOptions.maxAgeDays || 30,\n    maxQueueSize: userOptions.maxQueueSize || 30,\n    queuePath: userOptions.queuePath || join(getSentryCachePath(), 'queue'),\n  };\n\n  const queue = new Store<PersistedRequest[]>(options.queuePath, 'queue-v2', []);\n\n  function removeBody(id: string): void {\n    fs.unlink(join(options.queuePath, id)).catch(() => {\n      // ignore\n    });\n  }\n\n  function removeStaleRequests(queue: PersistedRequest[]): void {\n    while (queue[0] && isOutdated(queue[0], options.maxAgeDays)) {\n      const removed = queue.shift() as PersistedRequest;\n      log('Removing stale envelope', removed);\n      removeBody(removed.id);\n    }\n  }\n\n  async function insert(env: Envelope, which: 'push' | 'unshift', previousDate?: Date): Promise<void> {\n    log(`${which}ing envelope into offline storage`);\n\n    const id = uuid4();\n\n    try {\n      const data = serializeEnvelope(env);\n      await fs.mkdir(options.queuePath, { recursive: true });\n      await fs.writeFile(join(options.queuePath, id), data);\n    } catch (e) {\n      log('Failed to save', e);\n    }\n\n    await queue.update((queue) => {\n      if (which === 'push') {\n        removeStaleRequests(queue);\n\n        if (queue.length >= options.maxQueueSize) {\n          removeBody(id);\n          return queue;\n        }\n      }\n\n      queue[which]({ id, date: previousDate || getSentAtFromEnvelope(env) || new Date() });\n\n      return queue;\n    });\n  }\n\n  // We store the timestamp for the last envelope that was shifted out so that if it gets unshifted back in\n  // it can keep its original date\n  let lastShiftedDate: Date | undefined;\n\n  return {\n    push: async (env) => {\n      await insert(env, 'push');\n    },\n    unshift: async (env) => {\n      await insert(env, 'unshift', lastShiftedDate);\n    },\n    shift: async () => {\n      log('Popping envelope from offline storage');\n      let request: PersistedRequest | undefined;\n      await queue.update((queue) => {\n        removeStaleRequests(queue);\n        request = queue.shift();\n        return queue;\n      });\n\n      if (request) {\n        try {\n          const data = await fs.readFile(join(options.queuePath, request.id));\n          removeBody(request.id);\n          lastShiftedDate = request.date;\n          return parseEnvelope(data);\n        } catch (e) {\n          log('Failed to read', e);\n        }\n      }\n\n      return undefined;\n    },\n  };\n}\n"],"names":["logger","join","getSentryCachePath","Store","fs","uuid4","serializeEnvelope","parseEnvelope"],"mappings":"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"}