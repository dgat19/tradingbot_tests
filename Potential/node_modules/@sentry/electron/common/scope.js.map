{"version":3,"file":"scope.js","sources":["../src/src/common/scope.ts"],"sourcesContent":["import { getCurrentScope, getIsolationScope, mergeScopeData } from '@sentry/core';\nimport { Scope, ScopeData } from '@sentry/types';\n\n/** Gets the merged scope data */\nexport function getScopeData(): ScopeData {\n  const scope = getIsolationScope().getScopeData();\n  mergeScopeData(scope, getCurrentScope().getScopeData());\n  scope.eventProcessors = [];\n  return scope;\n}\n\n/** Hooks both current and isolation scope changes and passes merged scope on changes  */\nexport function addScopeListener(callback: (merged: ScopeData, changed: Scope) => void): void {\n  getIsolationScope().addScopeListener((isolation) => {\n    const merged = getScopeData();\n    callback(merged, isolation);\n  });\n  getCurrentScope().addScopeListener((current) => {\n    const merged = getScopeData();\n    callback(merged, current);\n  });\n}\n"],"names":["getIsolationScope","mergeScopeData","getCurrentScope"],"mappings":";;AAGA;SACgB,YAAY,GAAA;AAC1B,IAAA,MAAM,KAAK,GAAGA,sBAAiB,EAAE,CAAC,YAAY,EAAE;IAChDC,mBAAc,CAAC,KAAK,EAAEC,oBAAe,EAAE,CAAC,YAAY,EAAE,CAAC;AACvD,IAAA,KAAK,CAAC,eAAe,GAAG,EAAE;AAC1B,IAAA,OAAO,KAAK;AACd;AAEA;AACM,SAAU,gBAAgB,CAAC,QAAqD,EAAA;AACpF,IAAAF,sBAAiB,EAAE,CAAC,gBAAgB,CAAC,CAAC,SAAS,KAAI;AACjD,QAAA,MAAM,MAAM,GAAG,YAAY,EAAE;AAC7B,QAAA,QAAQ,CAAC,MAAM,EAAE,SAAS,CAAC;AAC7B,KAAC,CAAC;AACF,IAAAE,oBAAe,EAAE,CAAC,gBAAgB,CAAC,CAAC,OAAO,KAAI;AAC7C,QAAA,MAAM,MAAM,GAAG,YAAY,EAAE;AAC7B,QAAA,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC;AAC3B,KAAC,CAAC;AACJ;;;;;"}