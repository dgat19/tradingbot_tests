{"version":3,"file":"ipc.js","sources":["../src/src/common/ipc.ts"],"sourcesContent":["import { MeasurementUnit, Primitive } from '@sentry/types';\n\n/** Ways to communicate between the renderer and main process  */\nexport enum IPCMode {\n  /** Configures Electron IPC to receive messages from renderers */\n  Classic = 1,\n  /** Configures Electron protocol module to receive messages from renderers */\n  Protocol = 2,\n  /**\n   * Configures both methods for best compatibility.\n   *\n   * Renderers favour IPC but fall back to protocol if IPC has not\n   * been configured in a preload script\n   */\n  Both = 3,\n}\n\nexport const PROTOCOL_SCHEME = 'sentry-ipc';\n\nexport enum IPCChannel {\n  /** IPC to check main process is listening */\n  RENDERER_START = 'sentry-electron.renderer-start',\n  /** IPC to send a captured event to Sentry. */\n  EVENT = 'sentry-electron.event',\n  /** IPC to pass scope changes to main process. */\n  SCOPE = 'sentry-electron.scope',\n  /** IPC to pass envelopes to the main process. */\n  ENVELOPE = 'sentry-electron.envelope',\n  /** IPC to pass renderer status updates */\n  STATUS = 'sentry-electron.status',\n  /** IPC to pass renderer metric additions to the main process */\n  ADD_METRIC = 'sentry-electron.add-metric',\n}\n\nexport interface RendererProcessAnrOptions {\n  /**\n   * Interval to send heartbeat messages to the child process.\n   *\n   * Defaults to 1000ms.\n   */\n  pollInterval: number;\n  /**\n   * The number of milliseconds to wait before considering the renderer process to be unresponsive.\n   *\n   * Defaults to 5000ms.\n   */\n  anrThreshold: number;\n  /**\n   * Whether to capture a stack trace when the renderer process is unresponsive.\n   *\n   * Defaults to `false`.\n   */\n  captureStackTrace: boolean;\n}\n\nexport interface RendererStatus {\n  status: 'alive' | 'visible' | 'hidden';\n  config: RendererProcessAnrOptions;\n}\n\nexport interface MetricIPCMessage {\n  metricType: 'c' | 'g' | 's' | 'd';\n  name: string;\n  value: number | string;\n  unit?: MeasurementUnit;\n  tags?: Record<string, Primitive>;\n  timestamp?: number;\n}\n\nexport interface IPCInterface {\n  sendRendererStart: () => void;\n  sendScope: (scope: string) => void;\n  sendEvent: (event: string) => void;\n  sendEnvelope: (evn: Uint8Array | string) => void;\n  sendStatus: (state: RendererStatus) => void;\n  sendAddMetric: (metric: MetricIPCMessage) => void;\n}\n\nexport const RENDERER_ID_HEADER = 'sentry-electron-renderer-id';\n\nconst UTILITY_PROCESS_MAGIC_MESSAGE_KEY = '__sentry_message_port_message__';\n\n/** Does the message look like the magic message */\nexport function isMagicMessage(msg: unknown): boolean {\n  return !!(msg && typeof msg === 'object' && UTILITY_PROCESS_MAGIC_MESSAGE_KEY in msg);\n}\n\n/** Get the magic message to send to the utility process */\nexport function getMagicMessage(): unknown {\n  return { [UTILITY_PROCESS_MAGIC_MESSAGE_KEY]: true };\n}\n\n/**\n * We store the IPC interface on window so it's the same for both regular and isolated contexts\n */\ndeclare global {\n  interface Window {\n    __SENTRY_IPC__?: IPCInterface;\n    __SENTRY__RENDERER_INIT__?: boolean;\n    __SENTRY_RENDERER_ID__?: string;\n  }\n}\n"],"names":["IPCMode","IPCChannel"],"mappings":"AAEA;AACYA;AAAZ,CAAA,UAAY,OAAO,EAAA;;AAEjB,IAAA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAW;;AAEX,IAAA,OAAA,CAAA,OAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAY;AACZ;;;;;AAKG;AACH,IAAA,OAAA,CAAA,OAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAQ;AACV,CAAC,EAZWA,eAAO,KAAPA,eAAO,GAYlB,EAAA,CAAA,CAAA;AAEM,MAAM,eAAe,GAAG;AAEnBC;AAAZ,CAAA,UAAY,UAAU,EAAA;;AAEpB,IAAA,UAAA,CAAA,gBAAA,CAAA,GAAA,gCAAiD;;AAEjD,IAAA,UAAA,CAAA,OAAA,CAAA,GAAA,uBAA+B;;AAE/B,IAAA,UAAA,CAAA,OAAA,CAAA,GAAA,uBAA+B;;AAE/B,IAAA,UAAA,CAAA,UAAA,CAAA,GAAA,0BAAqC;;AAErC,IAAA,UAAA,CAAA,QAAA,CAAA,GAAA,wBAAiC;;AAEjC,IAAA,UAAA,CAAA,YAAA,CAAA,GAAA,4BAAyC;AAC3C,CAAC,EAbWA,kBAAU,KAAVA,kBAAU,GAarB,EAAA,CAAA,CAAA;AA8CM,MAAM,kBAAkB,GAAG;AAElC,MAAM,iCAAiC,GAAG,iCAAiC;AAE3E;AACM,SAAU,cAAc,CAAC,GAAY,EAAA;AACzC,IAAA,OAAO,CAAC,EAAE,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,iCAAiC,IAAI,GAAG,CAAC;AACvF;AAEA;SACgB,eAAe,GAAA;AAC7B,IAAA,OAAO,EAAE,CAAC,iCAAiC,GAAG,IAAI,EAAE;AACtD;;;;;;;"}