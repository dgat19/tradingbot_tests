{"version":3,"file":"sdk.js","sources":["../src/src/utility/sdk.ts"],"sourcesContent":["import { getIntegrationsToSetup } from '@sentry/core';\nimport {\n  consoleIntegration,\n  createGetModuleFromFilename,\n  functionToStringIntegration,\n  getCurrentScope,\n  inboundFiltersIntegration,\n  initOpenTelemetry,\n  linkedErrorsIntegration,\n  nativeNodeFetchIntegration,\n  NodeClient,\n  NodeOptions,\n  onUncaughtExceptionIntegration,\n  onUnhandledRejectionIntegration,\n  setNodeAsyncContextStrategy,\n} from '@sentry/node';\nimport { Integration, StackParser } from '@sentry/types';\nimport { createStackParser, logger, nodeStackLineParser, stackParserFromStackParserOptions } from '@sentry/utils';\n\nimport { makeUtilityProcessTransport } from './transport';\n\nexport const defaultStackParser: StackParser = createStackParser(nodeStackLineParser(createGetModuleFromFilename()));\n\n/** Get the default integrations for the main process SDK. */\nexport function getDefaultIntegrations(): Integration[] {\n  const integrations = [\n    // Node integrations\n    inboundFiltersIntegration(),\n    functionToStringIntegration(),\n    linkedErrorsIntegration(),\n    consoleIntegration(),\n    nativeNodeFetchIntegration(),\n    onUncaughtExceptionIntegration(),\n    onUnhandledRejectionIntegration(),\n  ];\n\n  return integrations;\n}\n\n/**\n * Initialize Sentry in the Electron main process\n */\nexport function init(userOptions: NodeOptions = {}): void {\n  const optionsWithDefaults = {\n    defaultIntegrations: getDefaultIntegrations(),\n    transport: makeUtilityProcessTransport(),\n    // We track sessions in the main process\n    autoSessionTracking: false,\n    sendClientReports: false,\n    ...userOptions,\n    stackParser: stackParserFromStackParserOptions(userOptions.stackParser || defaultStackParser),\n    // Events are sent via the main process but the Node SDK wont start without dsn\n    dsn: 'https://12345@dummy.dsn/12345',\n  };\n\n  const options = {\n    ...optionsWithDefaults,\n    integrations: getIntegrationsToSetup(optionsWithDefaults),\n  };\n\n  if (options.debug) {\n    logger.enable();\n  }\n\n  setNodeAsyncContextStrategy();\n\n  const scope = getCurrentScope();\n  scope.update(options.initialScope);\n\n  const client = new NodeClient(options);\n  scope.setClient(client);\n  client.init();\n\n  // If users opt-out of this, they _have_ to set up OpenTelemetry themselves\n  // There is no way to use this SDK without OpenTelemetry!\n  if (!options.skipOpenTelemetrySetup) {\n    initOpenTelemetry(client);\n  }\n}\n"],"names":["createStackParser","nodeStackLineParser","createGetModuleFromFilename","inboundFiltersIntegration","functionToStringIntegration","linkedErrorsIntegration","consoleIntegration","nativeNodeFetchIntegration","onUncaughtExceptionIntegration","onUnhandledRejectionIntegration","makeUtilityProcessTransport","stackParserFromStackParserOptions","getIntegrationsToSetup","logger","setNodeAsyncContextStrategy","getCurrentScope","NodeClient","initOpenTelemetry"],"mappings":";;;;;AAqBO,MAAM,kBAAkB,GAAgBA,uBAAiB,CAACC,yBAAmB,CAACC,gCAA2B,EAAE,CAAC;AAEnH;SACgB,sBAAsB,GAAA;AACpC,IAAA,MAAM,YAAY,GAAG;;AAEnB,QAAAC,8BAAyB,EAAE;AAC3B,QAAAC,gCAA2B,EAAE;AAC7B,QAAAC,4BAAuB,EAAE;AACzB,QAAAC,uBAAkB,EAAE;AACpB,QAAAC,+BAA0B,EAAE;AAC5B,QAAAC,mCAA8B,EAAE;AAChC,QAAAC,oCAA+B,EAAE;KAClC;AAED,IAAA,OAAO,YAAY;AACrB;AAEA;;AAEG;AACa,SAAA,IAAI,CAAC,WAAA,GAA2B,EAAE,EAAA;AAChD,IAAA,MAAM,mBAAmB,GAAG;QAC1B,mBAAmB,EAAE,sBAAsB,EAAE;QAC7C,SAAS,EAAEC,qCAA2B,EAAE;;AAExC,QAAA,mBAAmB,EAAE,KAAK;AAC1B,QAAA,iBAAiB,EAAE,KAAK;AACxB,QAAA,GAAG,WAAW;QACd,WAAW,EAAEC,uCAAiC,CAAC,WAAW,CAAC,WAAW,IAAI,kBAAkB,CAAC;;AAE7F,QAAA,GAAG,EAAE,+BAA+B;KACrC;AAED,IAAA,MAAM,OAAO,GAAG;AACd,QAAA,GAAG,mBAAmB;AACtB,QAAA,YAAY,EAAEC,2BAAsB,CAAC,mBAAmB,CAAC;KAC1D;IAED,IAAI,OAAO,CAAC,KAAK,EAAE;QACjBC,YAAM,CAAC,MAAM,EAAE;AAChB;AAED,IAAAC,gCAA2B,EAAE;AAE7B,IAAA,MAAM,KAAK,GAAGC,oBAAe,EAAE;AAC/B,IAAA,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC;AAElC,IAAA,MAAM,MAAM,GAAG,IAAIC,eAAU,CAAC,OAAO,CAAC;AACtC,IAAA,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC;IACvB,MAAM,CAAC,IAAI,EAAE;;;AAIb,IAAA,IAAI,CAAC,OAAO,CAAC,sBAAsB,EAAE;QACnCC,sBAAiB,CAAC,MAAM,CAAC;AAC1B;AACH;;;;;;"}