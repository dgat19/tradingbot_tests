{"version":3,"file":"metrics.js","sources":["../../src/renderer/metrics.ts"],"sourcesContent":["import type { MetricData } from '@sentry/core';\nimport { metrics as metricsCore } from '@sentry/core';\nimport { DurationUnit, MeasurementUnit, MetricsAggregator, Primitive } from '@sentry/types';\n\nimport { IPCInterface } from '../common/ipc';\nimport { getIPC } from './ipc';\n\n/**\n * Sends metrics to the Electron main process where they can be aggregated in a single process\n */\nclass ElectronRendererMetricsAggregator implements MetricsAggregator {\n  private readonly _ipc: IPCInterface;\n\n  public constructor() {\n    this._ipc = getIPC();\n  }\n\n  /** @inheritdoc */\n  public add(\n    metricType: 'c' | 'g' | 's' | 'd',\n    name: string,\n    value: string | number,\n    unit?: MeasurementUnit | undefined,\n    tags?: Record<string, Primitive> | undefined,\n    timestamp?: number | undefined,\n  ): void {\n    this._ipc.sendAddMetric({ metricType, name, value, unit, tags, timestamp });\n  }\n\n  /** @inheritdoc */\n  public flush(): void {\n    // do nothing\n  }\n\n  /** @inheritdoc */\n  public close(): void {\n    // do nothing\n  }\n\n  /** @inheritdoc */\n  public toString(): string {\n    return '';\n  }\n}\n\n/**\n * Adds a value to a counter metric\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nfunction increment(name: string, value: number = 1, data?: MetricData): void {\n  metricsCore.increment(ElectronRendererMetricsAggregator, name, value, data);\n}\n\n/**\n * Adds a value to a distribution metric\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nfunction distribution(name: string, value: number, data?: MetricData): void {\n  metricsCore.distribution(ElectronRendererMetricsAggregator, name, value, data);\n}\n\n/**\n * Adds a value to a set metric. Value must be a string or integer.\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nfunction set(name: string, value: number | string, data?: MetricData): void {\n  metricsCore.set(ElectronRendererMetricsAggregator, name, value, data);\n}\n\n/**\n * Adds a value to a gauge metric\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nfunction gauge(name: string, value: number, data?: MetricData): void {\n  metricsCore.gauge(ElectronRendererMetricsAggregator, name, value, data);\n}\n\n/**\n * Adds a timing metric.\n * The metric is added as a distribution metric.\n *\n * You can either directly capture a numeric `value`, or wrap a callback function in `timing`.\n * In the latter case, the duration of the callback execution will be captured as a span & a metric.\n *\n * @experimental This API is experimental and might have breaking changes in the future.\n */\nfunction timing(name: string, value: number, unit?: DurationUnit, data?: Omit<MetricData, 'unit'>): void;\nfunction timing<T>(name: string, callback: () => T, unit?: DurationUnit, data?: Omit<MetricData, 'unit'>): T;\nfunction timing<T = void>(\n  name: string,\n  value: number | (() => T),\n  unit: DurationUnit = 'second',\n  data?: Omit<MetricData, 'unit'>,\n): T | void {\n  metricsCore.timing(ElectronRendererMetricsAggregator, name, value, unit, data);\n}\n\nexport const metrics = {\n  increment,\n  distribution,\n  set,\n  gauge,\n  timing,\n};\n"],"names":["metricsCore"],"mappings":";;;AAOA;;AAEG;AACH,MAAM,iCAAiC,CAAA;AAGrC,IAAA,WAAA,GAAA;AACE,QAAA,IAAI,CAAC,IAAI,GAAG,MAAM,EAAE;;;IAIf,GAAG,CACR,UAAiC,EACjC,IAAY,EACZ,KAAsB,EACtB,IAAkC,EAClC,IAA4C,EAC5C,SAA8B,EAAA;AAE9B,QAAA,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;;;IAItE,KAAK,GAAA;;;;IAKL,KAAK,GAAA;;;;IAKL,QAAQ,GAAA;AACb,QAAA,OAAO,EAAE;;AAEZ;AAED;;;;AAIG;AACH,SAAS,SAAS,CAAC,IAAY,EAAE,KAAgB,GAAA,CAAC,EAAE,IAAiB,EAAA;IACnEA,SAAW,CAAC,SAAS,CAAC,iCAAiC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;AAC7E;AAEA;;;;AAIG;AACH,SAAS,YAAY,CAAC,IAAY,EAAE,KAAa,EAAE,IAAiB,EAAA;IAClEA,SAAW,CAAC,YAAY,CAAC,iCAAiC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;AAChF;AAEA;;;;AAIG;AACH,SAAS,GAAG,CAAC,IAAY,EAAE,KAAsB,EAAE,IAAiB,EAAA;IAClEA,SAAW,CAAC,GAAG,CAAC,iCAAiC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;AACvE;AAEA;;;;AAIG;AACH,SAAS,KAAK,CAAC,IAAY,EAAE,KAAa,EAAE,IAAiB,EAAA;IAC3DA,SAAW,CAAC,KAAK,CAAC,iCAAiC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;AACzE;AAaA,SAAS,MAAM,CACb,IAAY,EACZ,KAAyB,EACzB,IAAA,GAAqB,QAAQ,EAC7B,IAA+B,EAAA;AAE/B,IAAAA,SAAW,CAAC,MAAM,CAAC,iCAAiC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;AAChF;AAEa,MAAA,OAAO,GAAG;IACrB,SAAS;IACT,YAAY;IACZ,GAAG;IACH,KAAK;IACL,MAAM;;;;;"}