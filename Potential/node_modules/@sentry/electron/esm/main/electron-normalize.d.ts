/// <reference types="node" />
/// <reference types="node" />
export declare const ELECTRON_MAJOR_VERSION: number;
export declare const EXIT_REASONS: readonly ["clean-exit", "abnormal-exit", "killed", "crashed", "oom", "launch-failed", "integrity-failure"];
export type ExitReason = (typeof EXIT_REASONS)[number];
export declare const CRASH_REASONS: Readonly<ExitReason[]>;
/** Gets the Sentry Cache path */
export declare function getSentryCachePath(): string;
/** Is using Crashpad */
export declare function usesCrashpad(): boolean;
interface InternalRequest {
    windowId?: string;
    url: string;
    body?: Buffer;
}
/**
 * Registers a custom protocol to receive events from the renderer
 *
 * Uses `protocol.handle` if available, otherwise falls back to `protocol.registerStringProtocol`
 */
export declare function registerProtocol(protocol: Electron.Protocol, scheme: string, callback: (request: InternalRequest) => void): void;
export {};
//# sourceMappingURL=electron-normalize.d.ts.map