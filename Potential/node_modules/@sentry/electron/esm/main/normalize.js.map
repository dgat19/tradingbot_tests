{"version":3,"file":"normalize.js","sources":["../../src/main/normalize.ts"],"sourcesContent":["import { getCurrentScope } from '@sentry/core';\nimport { Envelope, Event, Profile, ReplayEvent } from '@sentry/types';\nimport { addItemToEnvelope, createEnvelope, forEachEnvelopeItem, normalizeUrlToBase } from '@sentry/utils';\n\n/**\n * Normalizes all URLs in an event. See {@link normalizeUrl} for more\n * information. Mutates the passed in event.\n *\n * @param event The event to normalize.\n */\nexport function normalizePaths(event: Event, basePath: string): Event {\n  // Retrieve stack traces and normalize their paths. Without this, grouping\n  // would not work due to usernames in file paths.\n  for (const exception of event.exception?.values || []) {\n    for (const frame of exception.stacktrace?.frames || []) {\n      if (frame.filename) {\n        frame.filename = normalizeUrlToBase(frame.filename, basePath);\n      }\n    }\n  }\n\n  // We need to normalize debug ID images the same way as the stack frames for symbolicator to match them correctly\n  for (const debugImage of event.debug_meta?.images || []) {\n    if (debugImage.type === 'sourcemap') {\n      debugImage.code_file = normalizeUrlToBase(debugImage.code_file, basePath);\n    }\n  }\n\n  if (event.transaction) {\n    event.transaction = normalizeUrlToBase(event.transaction, basePath);\n  }\n\n  const { request = {} } = event;\n  if (request.url) {\n    request.url = normalizeUrlToBase(request.url, basePath);\n  }\n\n  if (event.contexts?.feedback?.url && typeof event.contexts.feedback.url === 'string') {\n    event.contexts.feedback.url = normalizeUrlToBase(event.contexts.feedback.url, basePath);\n  }\n\n  if (event.spans) {\n    for (const span of event.spans) {\n      if (span.description?.startsWith('file://')) {\n        span.description = normalizeUrlToBase(span.description, basePath);\n      }\n    }\n  }\n\n  return event;\n}\n\n/** Normalizes URLs in any replay_event items found in an envelope */\nexport function normalizeUrlsInReplayEnvelope(envelope: Envelope, basePath: string): Envelope {\n  let modifiedEnvelope = createEnvelope(envelope[0]);\n\n  let isReplay = false;\n\n  forEachEnvelopeItem(envelope, (item, type) => {\n    if (type === 'replay_event') {\n      isReplay = true;\n      const [headers, event] = item as [{ type: 'replay_event' }, ReplayEvent];\n\n      const currentScope = getCurrentScope().getScopeData();\n      event.breadcrumbs = currentScope.breadcrumbs;\n      event.tags = currentScope.tags;\n      event.user = currentScope.user;\n\n      if (Array.isArray(event.urls)) {\n        event.urls = event.urls.map((url) => normalizeUrlToBase(url, basePath));\n      }\n\n      if (event?.request?.url) {\n        event.request.url = normalizeUrlToBase(event.request.url, basePath);\n      }\n\n      modifiedEnvelope = addItemToEnvelope(modifiedEnvelope, [headers, event]);\n    } else if (type === 'replay_recording') {\n      modifiedEnvelope = addItemToEnvelope(modifiedEnvelope, item);\n    }\n  });\n\n  return isReplay ? modifiedEnvelope : envelope;\n}\n\n/**\n * Normalizes all URLs in a profile\n */\nexport function normaliseProfile(profile: Profile, basePath: string): void {\n  for (const frame of profile.profile.frames) {\n    if (frame.abs_path) {\n      frame.abs_path = normalizeUrlToBase(frame.abs_path, basePath);\n    }\n  }\n}\n"],"names":[],"mappings":"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"}