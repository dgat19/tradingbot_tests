{"version":3,"file":"electron-minidump.js","sources":["../../../src/main/integrations/electron-minidump.ts"],"sourcesContent":["import { applyScopeDataToEvent, defineIntegration } from '@sentry/core';\nimport { NodeClient, NodeOptions } from '@sentry/node';\nimport { Event, ScopeData } from '@sentry/types';\nimport { logger, makeDsn, SentryError, uuid4 } from '@sentry/utils';\nimport { app, crashReporter } from 'electron';\n\nimport { addScopeListener, getScopeData } from '../../common/scope';\nimport { getEventDefaults, getSdkInfo } from '../context';\nimport { CRASH_REASONS, usesCrashpad } from '../electron-normalize';\nimport { mergeEvents } from '../merge';\nimport { normalizePaths } from '../normalize';\nimport { checkPreviousSession, sessionCrashed, unreportedDuringLastSession } from '../sessions';\n\n/** Is object defined and has keys */\nfunction hasKeys(obj: object | undefined): boolean {\n  return obj !== undefined && Object.keys(obj).length > 0;\n}\n\n/** Gets a Scope object with user, tags and extra */\nfunction getScope(options: NodeOptions): Event {\n  const scope = getScopeData();\n\n  if (!scope) {\n    return {};\n  }\n\n  return {\n    release: options.release,\n    environment: options.environment,\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    ...(hasKeys(scope.user) && { user: scope.user }),\n    ...(hasKeys(scope.tags) && { tags: scope.tags }),\n    ...(hasKeys(scope.extra) && { extra: scope.extra }),\n    /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  };\n}\n\n/** Chunks up event JSON into 1 or more parameters for use with the native Electron uploader\n *\n * Returns chunks with keys and values:\n * {\n *    sentry__1: '{ json...',\n *    sentry__2: 'more json...',\n *    sentry__x: 'end json }',\n * }\n */\nfunction getNativeUploaderExtraParams(event: Event): { [key: string]: string } {\n  const maxBytes = 20300;\n\n  /** Max chunk sizes are in bytes so we can't chunk by characters or UTF8 could bite us.\n   *\n   * We attempt to split by space (32) and double quote characters (34) as there are plenty in JSON\n   * and they are guaranteed to not be the first byte of a multi-byte UTF8 character.\n   */\n  let buf = Buffer.from(JSON.stringify(event));\n  const chunks = [];\n  while (buf.length) {\n    // Find last '\"'\n    let i = buf.lastIndexOf(34, maxBytes + 1);\n    // Or find last ' '\n    if (i < 0) i = buf.lastIndexOf(32, maxBytes + 1);\n    // Or find first '\"'\n    if (i < 0) i = buf.indexOf(34, maxBytes);\n    // Or find first ' '\n    if (i < 0) i = buf.indexOf(32, maxBytes);\n    // We couldn't find any space or quote chars so split at maxBytes and hope for the best 🤷‍♂️\n    if (i < 0) i = maxBytes;\n    chunks.push(buf.subarray(0, i + 1).toString());\n    buf = buf.subarray(i + 1);\n  }\n\n  return chunks.reduce((acc, cur, i) => {\n    acc[`sentry__${i + 1}`] = cur;\n    return acc;\n  }, {} as { [key: string]: string });\n}\n\n/**\n * Returns the minidump endpoint in Sentry\n * @param dsn Dsn\n */\nexport function minidumpUrlFromDsn(dsn: string): string | undefined {\n  const dsnComponents = makeDsn(dsn);\n  if (!dsnComponents) {\n    return undefined;\n  }\n  const { host, path, projectId, port, protocol, publicKey } = dsnComponents;\n  return `${protocol}://${host}${port !== '' ? `:${port}` : ''}${\n    path !== '' ? `/${path}` : ''\n  }/api/${projectId}/minidump/?sentry_key=${publicKey}`;\n}\n\n/**\n * Sends minidumps via the Electron built-in uploader.\n */\nexport const electronMinidumpIntegration = defineIntegration(() => {\n  /** Counter used to ensure no race condition when updating extra params */\n  let updateEpoch = 0;\n\n  async function getNativeUploaderEvent(client: NodeClient, scope: ScopeData): Promise<Event> {\n    const event = mergeEvents(await getEventDefaults(client), {\n      sdk: getSdkInfo(),\n      event_id: uuid4(),\n      level: 'fatal',\n      platform: 'native',\n      tags: { 'event.environment': 'native' },\n    });\n\n    applyScopeDataToEvent(event, scope);\n\n    delete event.sdkProcessingMetadata;\n\n    // Normalise paths\n    return normalizePaths(event, app.getAppPath());\n  }\n\n  function updateExtraParams(client: NodeClient, scope: ScopeData): void {\n    updateEpoch += 1;\n    const currentEpoch = updateEpoch;\n\n    getNativeUploaderEvent(client, scope)\n      .then((event) => {\n        if (currentEpoch !== updateEpoch) {\n          return;\n        }\n\n        // Update the extra parameters in the main process\n        const mainParams = getNativeUploaderExtraParams(event);\n        for (const [key, value] of Object.entries(mainParams)) {\n          crashReporter.addExtraParameter(key, value);\n        }\n      })\n      .catch((error) => logger.error(error));\n  }\n\n  function startCrashReporter(options: NodeOptions): void {\n    const submitURL = minidumpUrlFromDsn(options.dsn || '');\n    if (!submitURL) {\n      logger.log('Invalid DSN. Cannot start Electron crashReporter');\n      return;\n    }\n\n    // We don't add globalExtra when Breakpad is in use because it doesn't support JSON like strings:\n    // https://github.com/electron/electron/issues/29711\n    const globalExtra = usesCrashpad() ? { sentry___initialScope: JSON.stringify(getScope(options)) } : undefined;\n\n    logger.log('Starting Electron crashReporter');\n\n    crashReporter.start({\n      companyName: '',\n      ignoreSystemCrashHandler: true,\n      productName: app.name || app.getName(),\n      submitURL,\n      uploadToServer: true,\n      compress: true,\n      globalExtra,\n    });\n  }\n\n  function setupScopeListener(client: NodeClient): void {\n    addScopeListener((scope) => {\n      updateExtraParams(client, scope);\n    });\n  }\n\n  return {\n    name: 'ElectronMinidump',\n    setup(client: NodeClient) {\n      // Mac AppStore builds cannot run the crash reporter due to the sandboxing\n      // requirements. In this case, we prevent enabling native crashes entirely.\n      // https://electronjs.org/docs/tutorial/mac-app-store-submission-guide#limitations-of-mas-build\n      if (process.mas) {\n        return;\n      }\n\n      const clientOptions = client.getOptions();\n\n      if (!clientOptions?.dsn) {\n        throw new SentryError('Attempted to enable Electron native crash reporter but no DSN was supplied');\n      }\n\n      startCrashReporter(clientOptions);\n\n      // If a renderer process crashes, mark any existing session as crashed\n      app.on('render-process-gone', (_, __, details) => {\n        if (CRASH_REASONS.includes(details.reason)) {\n          sessionCrashed();\n        }\n      });\n\n      // If we're using the Crashpad minidump uploader, we set extra parameters whenever the scope updates\n      if (usesCrashpad()) {\n        setupScopeListener(client);\n      }\n\n      // Check if last crash report was likely to have been unreported in the last session\n      unreportedDuringLastSession(crashReporter.getLastCrashReport()?.date).then((crashed) => {\n        // Check if a previous session was not closed\n        return checkPreviousSession(crashed);\n      }, logger.error);\n    },\n  };\n});\n"],"names":[],"mappings":"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"}