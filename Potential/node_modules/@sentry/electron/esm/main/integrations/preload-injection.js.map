{"version":3,"file":"preload-injection.js","sources":["../../../src/main/integrations/preload-injection.ts"],"sourcesContent":["import { defineIntegration } from '@sentry/core';\nimport { logger } from '@sentry/utils';\nimport { app } from 'electron';\nimport { existsSync } from 'fs';\nimport { isAbsolute, resolve } from 'path';\nimport { fileURLToPath } from 'url';\n\nimport { IPCMode } from '../../common/ipc';\nimport { ElectronMainOptionsInternal } from '../sdk';\n\n// After bundling with webpack, require.resolve can return number so we include that in the types\n// to ensure we check for that!\nfunction getPreloadPath(): string | number | undefined {\n  try {\n    return require.resolve('../../preload/index.js');\n  } catch (_) {\n    try {\n      // This could be ESM\n      const currentDir = fileURLToPath(import.meta.url);\n      // Use the CJS preload\n      return resolve(currentDir, '..', '..', '..', '..', 'preload', 'index.js');\n    } catch (_) {\n      //\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Injects the preload script into the provided sessions.\n *\n * Defaults to injecting into the defaultSession\n */\nexport const preloadInjectionIntegration = defineIntegration(() => {\n  return {\n    name: 'PreloadInjection',\n    setup(client) {\n      const options = client.getOptions() as ElectronMainOptionsInternal;\n\n      // If classic IPC mode is disabled, we shouldn't attempt to inject preload scripts\n      // eslint-disable-next-line no-bitwise\n      if ((options.ipcMode & IPCMode.Classic) === 0) {\n        return;\n      }\n\n      app.once('ready', () => {\n        const path = getPreloadPath();\n\n        if (path && typeof path === 'string' && isAbsolute(path) && existsSync(path)) {\n          for (const sesh of options.getSessions()) {\n            // Fetch any existing preloads so we don't overwrite them\n            const existing = sesh.getPreloads();\n            sesh.setPreloads([path, ...existing]);\n          }\n        } else {\n          logger.log(\n            'The preload script could not be injected automatically. This is most likely caused by bundling of the main process',\n          );\n        }\n      });\n    },\n  };\n});\n"],"names":[],"mappings":";;;;;;;;AAUA;AACA;AACA,SAAS,cAAc,GAAA;IACrB,IAAI;AACF,QAAA,OAAO,OAAO,CAAC,OAAO,CAAC,wBAAwB,CAAC;AACjD;AAAC,IAAA,OAAO,CAAC,EAAE;QACV,IAAI;;YAEF,MAAM,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;;AAEjD,YAAA,OAAO,OAAO,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,CAAC;AAC1E;AAAC,QAAA,OAAO,CAAC,EAAE;;AAEX;AACF;AAED,IAAA,OAAO,SAAS;AAClB;AAEA;;;;AAIG;AACU,MAAA,2BAA2B,GAAG,iBAAiB,CAAC,MAAK;IAChE,OAAO;AACL,QAAA,IAAI,EAAE,kBAAkB;AACxB,QAAA,KAAK,CAAC,MAAM,EAAA;AACV,YAAA,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,EAAiC;;;YAIlE,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,MAAM,CAAC,EAAE;gBAC7C;AACD;AAED,YAAA,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,MAAK;AACrB,gBAAA,MAAM,IAAI,GAAG,cAAc,EAAE;AAE7B,gBAAA,IAAI,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;AAC5E,oBAAA,KAAK,MAAM,IAAI,IAAI,OAAO,CAAC,WAAW,EAAE,EAAE;;AAExC,wBAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE;wBACnC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,GAAG,QAAQ,CAAC,CAAC;AACtC;AACF;AAAM,qBAAA;AACL,oBAAA,MAAM,CAAC,GAAG,CACR,oHAAoH,CACrH;AACF;AACH,aAAC,CAAC;SACH;KACF;AACH,CAAC;;;;"}