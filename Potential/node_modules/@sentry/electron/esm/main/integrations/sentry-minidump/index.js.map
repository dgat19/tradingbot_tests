{"version":3,"file":"index.js","sources":["../../../../src/main/integrations/sentry-minidump/index.ts"],"sourcesContent":["import { applyScopeDataToEvent, captureEvent, defineIntegration, Scope } from '@sentry/core';\nimport { NodeClient } from '@sentry/node';\nimport { Event, ScopeData } from '@sentry/types';\nimport { logger, SentryError } from '@sentry/utils';\nimport { app, crashReporter } from 'electron';\n\nimport { addScopeListener, getScopeData } from '../../../common/scope';\nimport { getEventDefaults } from '../../context';\nimport { EXIT_REASONS, getSentryCachePath } from '../../electron-normalize';\nimport { getRendererProperties, trackRendererProperties } from '../../renderers';\nimport { ElectronMainOptions } from '../../sdk';\nimport { checkPreviousSession, sessionCrashed } from '../../sessions';\nimport { BufferedWriteStore } from '../../store';\nimport { getMinidumpLoader, MinidumpLoader } from './minidump-loader';\n\ninterface PreviousRun {\n  scope: ScopeData;\n  event?: Event;\n}\n\ninterface Options {\n  /**\n   * Maximum number of minidumps to send per session\n   * Once this number has been reached, no more minidumps will be sent\n   *\n   * default: 10\n   */\n  maxMinidumpsPerSession?: number;\n}\n\n/**\n * Sends minidumps via the Sentry uploader\n */\nexport const sentryMinidumpIntegration = defineIntegration((options: Options = {}) => {\n  // The remaining number of minidumps that can be sent in this session\n  let minidumpsRemaining = options.maxMinidumpsPerSession || 10;\n  // Store to persist context information beyond application crashes.\n  let scopeStore: BufferedWriteStore<PreviousRun> | undefined;\n  // We need to store the scope in a variable here so it can be attached to minidumps\n  let scopeLastRun: Promise<PreviousRun> | undefined;\n  let minidumpLoader: MinidumpLoader | undefined;\n\n  function startCrashReporter(): void {\n    logger.log('Starting Electron crashReporter');\n\n    crashReporter.start({\n      companyName: '',\n      ignoreSystemCrashHandler: true,\n      productName: app.name || app.getName(),\n      // Empty string doesn't work for Linux Crashpad and no submitURL doesn't work for older versions of Electron\n      submitURL: 'https://f.a.k/e',\n      uploadToServer: false,\n      compress: true,\n    });\n  }\n\n  function setupScopeListener(client: NodeClient): void {\n    function scopeChanged(scope: ScopeData): void {\n      // Since the initial scope read is async, we need to ensure that any writes do not beat that\n      // https://github.com/getsentry/sentry-electron/issues/585\n      setImmediate(async () =>\n        scopeStore?.set({\n          scope,\n          event: await getEventDefaults(client),\n        }),\n      );\n    }\n\n    addScopeListener((scope) => {\n      scopeChanged(scope);\n    });\n\n    scopeChanged(getScopeData());\n  }\n\n  async function sendNativeCrashes(client: NodeClient, eventIn: Event): Promise<boolean> {\n    // Whenever we are called, assume that the crashes we are going to load down\n    // below have occurred recently. This means, we can use the same event data\n    // for all minidumps that we load now. There are two conditions:\n    //\n    //  1. The application crashed and we are just starting up. The stored\n    //     breadcrumbs and context reflect the state during the application\n    //     crash.\n    //\n    //  2. A renderer process crashed recently and we have just been notified\n    //     about it. Just use the breadcrumbs and context information we have\n    //     right now and hope that the delay was not too long.\n\n    const event = eventIn;\n\n    // If this is a native main process crash, we need to apply the scope and context from the previous run\n    if (event.tags?.['event.process'] === 'browser') {\n      const previousRun = await scopeLastRun;\n      if (previousRun) {\n        if (previousRun.scope) {\n          applyScopeDataToEvent(event, previousRun.scope);\n        }\n\n        event.release = previousRun.event?.release || event.release;\n        event.environment = previousRun.event?.environment || event.environment;\n        event.contexts = previousRun.event?.contexts || event.contexts;\n      }\n    }\n\n    if (!event) {\n      return false;\n    }\n\n    if (minidumpsRemaining <= 0) {\n      logger.log('Not sending minidumps because the limit has been reached');\n    }\n\n    // If the SDK is not enabled, or we've already reached the minidump limit, tell the loader to delete all minidumps\n    const deleteAll = client.getOptions().enabled === false || minidumpsRemaining <= 0;\n\n    let minidumpFound = false;\n    await minidumpLoader?.(deleteAll, (attachment) => {\n      minidumpFound = true;\n\n      if (minidumpsRemaining > 0) {\n        minidumpsRemaining -= 1;\n        captureEvent(event as Event, { attachments: [attachment] });\n      }\n    });\n\n    return minidumpFound;\n  }\n\n  async function sendRendererCrash(\n    client: NodeClient,\n    options: ElectronMainOptions,\n    contents: Electron.WebContents,\n    details: Partial<Electron.RenderProcessGoneDetails>,\n  ): Promise<void> {\n    const { getRendererName } = options;\n    const crashedProcess = getRendererName?.(contents) || 'renderer';\n\n    logger.log(`'${crashedProcess}' process '${details.reason}'`);\n\n    const found = await sendNativeCrashes(client, {\n      contexts: {\n        electron: {\n          crashed_url: getRendererProperties(contents.id)?.url || 'unknown',\n          details,\n        },\n      },\n      level: 'fatal',\n      // The default is javascript\n      platform: 'native',\n      tags: {\n        'event.environment': 'native',\n        'event.process': crashedProcess,\n        'exit.reason': details.reason,\n      },\n    });\n\n    if (found) {\n      sessionCrashed();\n    }\n  }\n\n  async function sendChildProcessCrash(\n    client: NodeClient,\n    options: ElectronMainOptions,\n    details: Omit<Electron.Details, 'exitCode'>,\n  ): Promise<void> {\n    logger.log(`${details.type} process has ${details.reason}`);\n\n    const found = await sendNativeCrashes(client, {\n      contexts: {\n        electron: { details },\n      },\n      level: 'fatal',\n      // The default is javascript\n      platform: 'native',\n      tags: {\n        'event.environment': 'native',\n        'event.process': details.type,\n        'exit.reason': details.reason,\n        event_type: 'native',\n      },\n    });\n\n    if (found) {\n      sessionCrashed();\n    }\n  }\n\n  return {\n    name: 'SentryMinidump',\n    setup(client: NodeClient): void {\n      // Mac AppStore builds cannot run the crash reporter due to the sandboxing\n      // requirements. In this case, we prevent enabling native crashes entirely.\n      // https://electronjs.org/docs/tutorial/mac-app-store-submission-guide#limitations-of-mas-build\n      if (process.mas) {\n        return;\n      }\n\n      startCrashReporter();\n\n      scopeStore = new BufferedWriteStore<PreviousRun>(getSentryCachePath(), 'scope_v3', {\n        scope: new Scope().getScopeData(),\n      });\n      scopeLastRun = scopeStore.get();\n      minidumpLoader = getMinidumpLoader();\n\n      const options = client.getOptions();\n\n      setupScopeListener(client);\n\n      if (!options?.dsn) {\n        throw new SentryError('Attempted to enable Electron native crash reporter but no DSN was supplied');\n      }\n\n      trackRendererProperties();\n\n      app.on('render-process-gone', async (_, contents, details) => {\n        if (EXIT_REASONS.includes(details.reason)) {\n          await sendRendererCrash(client, options, contents, details);\n        }\n      });\n      app.on('child-process-gone', async (_, details) => {\n        if (EXIT_REASONS.includes(details.reason)) {\n          await sendChildProcessCrash(client, options, details);\n        }\n      });\n\n      // Start to submit recent minidump crashes. This will load breadcrumbs and\n      // context information that was cached on disk in the previous app run, prior to the crash.\n      sendNativeCrashes(client, {\n        level: 'fatal',\n        platform: 'native',\n        tags: {\n          'event.environment': 'native',\n          'event.process': 'browser',\n        },\n      })\n        .then((minidumpsFound) =>\n          // Check for previous uncompleted session. If a previous session exists\n          // and no minidumps were found, its likely an abnormal exit\n          checkPreviousSession(minidumpsFound),\n        )\n        .catch((error) => logger.error(error));\n    },\n  };\n});\n"],"names":[],"mappings":"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"}