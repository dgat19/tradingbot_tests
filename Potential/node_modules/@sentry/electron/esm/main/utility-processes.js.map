{"version":3,"file":"utility-processes.js","sources":["../../src/main/utility-processes.ts"],"sourcesContent":["import { captureEvent, getClient } from '@sentry/node';\nimport { Attachment, Event } from '@sentry/types';\nimport { logger, parseEnvelope } from '@sentry/utils';\nimport * as electron from 'electron';\n\nimport { eventFromEnvelope } from '../common/envelope';\nimport { getMagicMessage, isMagicMessage } from '../common/ipc';\nimport { mergeEvents } from './merge';\n\nfunction log(message: string): void {\n  logger.log(`[Utility Process] ${message}`);\n}\n\n/**\n * We wrap `electron.utilityProcess.fork` so we can pass a messageport to any SDK running in the utility process\n */\nexport function configureUtilityProcessIPC(): void {\n  if (!electron.utilityProcess?.fork) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  electron.utilityProcess.fork = new Proxy(electron.utilityProcess.fork, {\n    apply: (target, thisArg, args: Parameters<typeof electron.utilityProcess.fork>) => {\n      // Call the underlying function to get the child process\n      const child: electron.UtilityProcess = target.apply(thisArg, args);\n\n      function getProcessName(): string {\n        const [, , options] = args;\n        return options?.serviceName || `pid:${child.pid}`;\n      }\n\n      // We don't send any messages unless we've heard from the child SDK. At that point we know it's ready to receive\n      // and will also filter out any messages we send so users don't see them\n      child.on('message', (msg: unknown) => {\n        if (isMagicMessage(msg)) {\n          log(`SDK started in utility process '${getProcessName()}'`);\n\n          const { port1, port2 } = new electron.MessageChannelMain();\n\n          port2.on('message', (msg) => {\n            if (msg.data instanceof Uint8Array || typeof msg.data === 'string') {\n              handleEnvelopeFromUtility(msg.data);\n            }\n          });\n          port2.start();\n\n          // Send one side of the message port to the child SDK\n          child.postMessage(getMagicMessage(), [port1]);\n        }\n      });\n\n      // We proxy child.on so we can filter messages from the child SDK and ensure that users do not see them\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      child.on = new Proxy(child.on, {\n        apply: (target, thisArg, [event, listener]) => {\n          if (event === 'message') {\n            return target.apply(thisArg, [\n              'message',\n              (msg: unknown) => {\n                if (isMagicMessage(msg)) {\n                  return;\n                }\n\n                return listener(msg);\n              },\n            ]);\n          }\n\n          return target.apply(thisArg, [event, listener]);\n        },\n      });\n\n      return child;\n    },\n  });\n}\n\nfunction handleEnvelopeFromUtility(env: Uint8Array | string): void {\n  const envelope = parseEnvelope(env);\n\n  const eventAndAttachments = eventFromEnvelope(envelope);\n  if (eventAndAttachments) {\n    const [event, attachments] = eventAndAttachments;\n\n    captureEventFromUtility(event, attachments);\n  } else {\n    // Pass other types of envelope straight to the transport\n    void getClient()?.getTransport()?.send(envelope);\n  }\n}\n\nfunction captureEventFromUtility(event: Event, attachments: Attachment[]): void {\n  // Remove the environment as it defaults to 'production' and overwrites the main process environment\n  delete event.environment;\n  delete event.release;\n\n  // Remove the SDK info as we want the Electron SDK to be the one reporting the event\n  delete event.sdk?.name;\n  delete event.sdk?.version;\n  delete event.sdk?.packages;\n\n  captureEvent(mergeEvents(event, { tags: { 'event.process': 'utility' } }), { attachments });\n}\n"],"names":[],"mappings":"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"}